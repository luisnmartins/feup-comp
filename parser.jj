/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options {
	             
	DEBUG_PARSER = false;
}

PARSER_BEGIN(parser)

	import java.io.*;
	public class parser/*@bgen(jjtree)*/implements parserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTparserState jjtree = new JJTparserState();

/*@egen*/

		public static void main(String[] args) {
			String everything;
			
            parser xparser;
            
			
			if(args.length == 0){
				System.out.println("Parser, reading the input...");
				xparser = new parser(System.in);
			}else if(args.length == 1){
				System.out.println("Parser: Reading the file " + args[0]);
				try{
					xparser = new parser(new java.io.FileInputStream(args[0]));
				}catch(java.io.FileNotFoundException e){
					System.out.println("Parser, The file" + args[0] + "was not found");
					return;

				}
			}else{
				System.out.println ("Parser:  You must use one of the following:");
        		System.out.println ("         java parser < file");
        		System.out.println ("Or");
        		System.out.println ("         java parser file");
        		return ;
			}try {
                SimpleNode root = xparser.module();
                root.dump("");
				
			}catch(ParseException e){
				System.out.println ("Parser: There was an error during the parse.");
				System.out.println (e.getMessage());
			}
			catch(TokenMgrError e){
				System.out.println ("Parser: There was an error.");
				System.out.println (e.getMessage());
			}
		}
		
	/*	public int eval(SimpleNode node){
			if(node.jjtGetNumChildren() == 0)
            		return node.val;
        	else if(node.jjtGetNumChildren() == 1)
            		return this.eval((SimpleNode) node.jjtGetChild(0));
			SimpleNode[] children = new SimpleNode[node.jjtGetNumChildren()];

			for(int i = 0; i < node.jjtGetNumChildren(); i++){
				children[i] = (SimpleNode) node.jjtGetChild(i);
			}

			switch (node.id) {
				case value:
					
					break;
			
				default:
					break;
			}

			return 0;
		}*/
	}


PARSER_END(parser)

SKIP : {
	" "
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}


JAVACODE
void error_skipto(int kind, ParseException e) {/*@bgen(jjtree) error_skipto */
     ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/
	
	System.out.println(e.toString());
	Token t;
	do{
		t=getNextToken();
	}while(t.kind != kind);/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

JAVACODE 
void error_skipto2(int kind, int kind2, ParseException e) {/*@bgen(jjtree) error_skipto2 */
ASTerror_skipto2 jjtn000 = new ASTerror_skipto2(JJTERROR_SKIPTO2);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/ 
   
  System.out.println(e.toString()); 
  Token t; 
  do{ 
     
    t=getNextToken(); 
    System.out.println(t); 
 
  }while(t.kind != kind && t.kind != kind2);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/ 

  /**
   *  //try { 
    <MODULE> <ID> <LCHAVETA> (Declaration())* ( 
        { 
          while(jj_ntk != RCHA) 
            try { 
              Function() 
            } ... 
        } 
        <RCHAVETA> 
        LOOKAHEAD({!}) 
        try { 
          Function() 
        } catch(ParseException e) { 
          error_skipto(PVIRG, e); 
        } 
      )* <RCHAVETA> 
  /*} catch(ParseException e) { 
    error_skipto(RCHAVETA, e); }
   */
}


SimpleNode module(): {/*@bgen(jjtree) module */
                      ASTmodule jjtn000 = new ASTmodule(JJTMODULE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}  
{/*@bgen(jjtree) module */
        try {
/*@egen*/
	try {
		<MODULE> t=<ID> {jjtn000.moduleName = t.image;} <LCHAVETA> (Declaration())* (Function())* <RCHAVETA> 
	} catch (ParseException e) {
		error_skipto(RCHAVETA, e);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Declaration() : {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	access() ( (/*@bgen(jjtree) equals */
                    {
                      ASTequals jjtn001 = new ASTequals(JJTEQUALS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/<ASSIGN>/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/        ) (("[" ArraySize()/*@bgen(jjtree) arrayDeclaration */
                                                        {
                                                          ASTarrayDeclaration jjtn002 = new ASTarrayDeclaration(JJTARRAYDECLARATION);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                          }
                                                        }
/*@egen*/                  ) | ( (<ADDSUB_OP>)?/*@bgen(jjtree) scalarDeclaration */
                                                                                                  {
                                                                                                    ASTscalarDeclaration jjtn003 = new ASTscalarDeclaration(JJTSCALARDECLARATION);
                                                                                                    boolean jjtc003 = true;
                                                                                                    jjtree.openNodeScope(jjtn003);
                                                                                                  }
                                                                                                  try {
/*@egen*/ <INTEGER>/*@bgen(jjtree)*/
                                                                                                  } finally {
                                                                                                    if (jjtc003) {
                                                                                                      jjtree.closeNodeScope(jjtn003, true);
                                                                                                    }
                                                                                                  }
/*@egen*/                   )) )? <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Function() : {/*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	try{
	<FUNCTION> t=<ID> {jjtn000.moduleName = t.image;} 
	}catch(ParseException e){
		
		error_skipto(ID, e);
	}
	try{
	( ( ("[" "]")? <ASSIGN> <ID> <LPAR> (Varlist())? <RPAR> ) | (<LPAR> ( Varlist() )? <RPAR> ) )
		
	}catch(ParseException e){
		
		error_skipto(RPAR, e);
	}
	
		<LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
	
}

void access()       :{}
{
	<ID> (ArrayElement() |/*@bgen(jjtree) scalar */
                               {
                                 ASTscalar jjtn001 = new ASTscalar(JJTSCALAR);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                               }
/*@egen*/ {}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
                               }
/*@egen*/        )
}

void Varlist()       : {}
{
	access() ( <VIRG> access())*
}

void ArrayElement()        : {/*@bgen(jjtree) array */
  ASTarray jjtn000 = new ASTarray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array */
        try {
/*@egen*/
	"[" "]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Stmtlst()       : {}
{
	 ( Stmt() )*
	 
}

void Stmt()       : {}
{
	
	While() 
	| 
	If() 
	| 
	try{	
		(( <ID> (LOOKAHEAD(2) Call() | Assign() )) <PVIRG>)
	}catch(ParseException e){
		
		error_skipto(PVIRG, e);
	}


	
}


void Call() : {/*@bgen(jjtree) Call */
  ASTCall jjtn000 = new ASTCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
	try{
		( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
	}catch(ParseException e){
		error_skipto(RPAR, e);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
	
}


void Assign() : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
	Lhs() <ASSIGN> Rhs()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lhs() : {/*@bgen(jjtree) Lhs */
  ASTLhs jjtn000 = new ASTLhs(JJTLHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lhs */
        try {
/*@egen*/
	ArrayAccess() | ScalarAccess()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Rhs() : {/*@bgen(jjtree) Rhs */
  ASTRhs jjtn000 = new ASTRhs(JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rhs */
        try {
/*@egen*/
	( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? )
		| "[" ArraySize() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void ArraySize() : {/*@bgen(jjtree) ArraySize */
  ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArraySize */
        try {
/*@egen*/
	( <ID> ScalarAccess() ) | <INTEGER>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Term() : {/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
        try {
/*@egen*/
	( <ADDSUB_OP> )? ( <INTEGER> | ( <ID> ( ArrayAccess() | (LOOKAHEAD(2) Call() | ScalarAccess()))))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Exprtest() : {/*@bgen(jjtree) Exprtest */
  ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exprtest */
        try {
/*@egen*/
	try{
	<LPAR> <ID> Lhs() <RELA_OP> Rhs() <RPAR>
	}catch(ParseException e){
		
		error_skipto(RPAR, e);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	try{
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
	}catch(ParseException e){
		error_skipto(RCHAVETA, e);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	try{
		<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst() <RCHAVETA> )?
	}catch(ParseException e){
		error_skipto(RCHAVETA, e);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
        try {
/*@egen*/
	
	Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
	
}

void Argument() : {/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
	( <ID> | <STRING> | <INTEGER> )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAccess() : {/*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayAccess */
        try {
/*@egen*/
	"[" Index() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarAccess() : {/*@bgen(jjtree) ScalarAccess */
  ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ScalarAccess */
        try {
/*@egen*/
	( "." <SIZE> )?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Index() : {/*@bgen(jjtree) Index */
  ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Index */
        try {
/*@egen*/
	<ID> | <INTEGER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
