SYNTACTIC_TEST:

In this file we can find 4 syntactic errors that are signaled by our tool.
The first error is about an invalid name of a function, which should start with a Letter and not an Integer.
The second error is about an invalid argument. This tool does not allow strings as arguments of functions.
The third error happens due to the 2 conditions inside an exprTest statement.
The fourth error is about the presence of an arithmetic expression inside of a function call.

command: java –jar yal2jvm.jar [-o] syntactic_test.yal


GEN_CODE1:

The while cycle in the line 4 which corresponds to the code existent in the .j file between lines 10 and 39.
Notice the fact that it is according to the most efficient template, meaning it is optimized (using -o option). As refered in the
optimizations section you may also notice the existence of an if statement with the reverse condition which destination in case of being true is the end of loop (loop_end0)

In the cases where in an assign the left variable also appears on the right side, and the operation is either sum ou subtraction (and the variable is function local),
the iinc instruction is used.

command: java –jar yal2jvm.jar [-o] gen_code1.yal


GEN_CODE2:

In the line 16 it is possible to notice the existence of the instruction iconst_m1, optimized for instructions where one of the elements is a constant equal to -1.

In the lines 19 to 21, 23 to 24, you may observe that there is a case of constant propagation followed by constant folding, meaning that the variables t and a are replaced
and then the operations are made with only one istore instruction for the final value.

In the lines 34 and 35 only constant propagation is used as the variable c may have its value altered previously meaning it isn't possible to propagate its value.

Note also the lines 29 and 30 that beacuse they are in a cycle while no optimizations are made, neither constant propagation nor constant folding, 
as these may be changed in the loop iterations.

command: java –jar yal2jvm.jar [-o] gen_code2.yal


We can verify a lot of examples (the more relevant) of semantic error detected by our tool.

SEMANTIC_TEST1:

    Our parser doesnt allow the redeclaration of an array size, that is why there is an error on line 6
    On line 12 we can verify an error because there cannot be operations with arrays and in ret = scalar1 + c, c is an array

    Overload of functions is not allowed so there is an error on line 29 because f() is already defined on line 20
    There is an error on line 34 because there is no function named 'c' anywhere in the module
    On line 36 there is an error because variable scalar as already been defined as a scalar, function f() returns an array, incompatible types
    Our parser analyses the function call parameters,so in line 36 there is an error on the call of the function scalar because, parameter arr doesnt exist or isnt initialized
    In line 43 function scalar receives wrong number of arguments
    In line 45 function scalar receives a parameter of wrong type (first parameter to be precise)
    In line 46 call of scalar with parameters undefined (similar to line 37 error)
    A function isnt allowed to have parameters with the same name even if they are of different types, so there is an error on line 50 because of the duplication of the parameters 'a' and 'b'
    We also check the return variable of a function, there is an error on line 54 because the return variable 'return' is never declared on the scope of the function
    In line 58 is detected an error because, the return type is declared but with the wrong type

command: java –jar yal2jvm.jar [-o] semantic_test1.yal


SEMANTIC_TEST2:

This module is more focused on the if and whiles statements

    It is detected an error in line 9 since variable 'b' is only declared on the if scope of line 5
    Same issue in line 20, variable 'val' is only defined inside of the while in line 11
    To show that semantic analysis works in stack of whiles or if, we show the error on line 21 where 'another' is not declared outside of the while, is only declared on the if in line 14 that is inside of the while  that is why there is an error on line 17 too, 'another' is only inside of the if statement
    Error on line 27 because of incompatible type of variable 'val1' on the else statement with the 'val1' on the if statement NOTE: because of this error the error on line 29 is ignored
    Finnally theres is an error on return statement of the function main, because is only declared on an if scope;

    To point out that there is no error in line 37 because scalar is defined in both of the if and else statement with the same type

command: java –jar yal2jvm.jar [-o] semantic_test2.yal