import java.util.ArrayList;
import java.util.AbstractMap.SimpleEntry;

/* Generated By:JJTree: Do not edit this line. ASTRhs.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTRhs extends SimpleNode {

  public String operator = null;

  public ASTRhs(int id) {
    super(id);
  }

  public ASTRhs(Parser p, int id) {
    super(p, id);
  }

  // Rhs(+/-/*..)
  @Override
  public String toString(String prefix) {
    if (this.operator != null)
      return prefix + " " + toString() + " ( " + this.operator + " )";
    else
      return prefix + " " + toString();
  }

  @Override
  public SimpleEntry<Boolean, Boolean> createAndCheckSymbol(SymbolTable parent) throws ParseException {

    Boolean allCorrect = true;
    SimpleEntry<Boolean, Boolean> response = new SimpleEntry<>(true, false);
    for (int i = 0; i < this.jjtGetNumChildren(); i++) {
      try {
        response = this.jjtGetChild(i).createAndCheckSymbol(parent);
      } catch (ParseException e) {
        allCorrect = false;
        response = new SimpleEntry<>(false, false);
        System.out.println(e.getMessage());
      }
      if (operator != null && response.getValue() == true) {
        throw new ParseException(this, "Is not possible to operate with arrays");
      }
    }
    if (allCorrect == false)
      return new SimpleEntry<>(false, null);
    else
      return new SimpleEntry<>(true, response.getValue());
  }

  public ArrayList getJVMCode(FunctionTable parent, ArrayList instList) {
    ArrayList instructions = instList;

    if (children.length == 1) {

      instructions = this.jjtGetChild(0).getJVMCode(parent, instructions);

    } else {

      for (int m = 0; m < 2; m++) {
        instructions = this.jjtGetChild(m).getJVMCode(parent, instructions);
      }
      instList.add(getOperation(operator));

    }

    return instructions;

  }

  public String getOperation(String op) {
    switch (op) {
    case "+":
      return "iadd";
    case "-":
      return "isub";
    case "*":
      return "imul";
    case "/":
      return "idiv";
    case "<<":
      return "ishl";
    case ">>":
      return "ishr";
    case ">>>":
      return "iushr";
    case "&":
      return "iand";
    case "|":
      return "ior";
    case "^":
      return "ixor";
    default:
      return "";
    }
  }

}
/*
 * JavaCC - OriginalChecksum=243722291f580c9eef839a742207993d (do not edit this
 * line)
 */
