import java.util.ArrayList;
import java.util.AbstractMap.SimpleEntry;

/* Generated By:JJTree: Do not edit this line. ASTWhile.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTWhile extends SimpleNode {
  FunctionTable variablesWhile;

  public ASTWhile(int id) {
    super(id);
  }

  public ASTWhile(Parser p, int id) {
    super(p, id);
  }

  @Override
  public SimpleEntry<Boolean, Boolean> createAndCheckSymbol(SymbolTable parent) throws ParseException {
    boolean allCorrect = true;
    SymbolTable newParent = null;

    try {
      newParent = parent.clone();
    } catch (CloneNotSupportedException e) {
      e.getMessage();
    }

    variablesWhile = (FunctionTable) newParent;
    variablesWhile.setisClone(true);

    for (int i = 0; i < this.jjtGetNumChildren(); i++) {
      if (this.jjtGetChild(i).createAndCheckSymbol(newParent).getKey() == false) {
        allCorrect = false;
      }
    }
    return new SimpleEntry<>(allCorrect, null);
  }

  @Override
  public int setRegistry(FunctionTable parent, int registry) {
    int reg = registry;

    Boolean retHasReg = false;
    if (parent.getReturnParameter() != null)
      if (parent.getReturnParameter().getValue().getRegistry() != null || parent.getRetHasReg())
        retHasReg = true;

    variablesWhile.setRetHasReg(retHasReg);

    System.out.println("WHILE");
    System.out.println(parent.getReturnParameter().getValue().getRegistry());
    

    for (int i = 0; i < children.length; i++) {
      reg = children[i].setRegistry(variablesWhile, reg);
    }

    return reg;

  }

  public ArrayList getJVMCode(FunctionTable parent, ArrayList instList) {
    ArrayList instructions = instList;

    int loopCount = getLoopCount(instructions);

    instructions.add("loop" + loopCount + ":");

    instructions.add("");

    instructions = this.jjtGetChild(0).getJVMCode(parent, instructions);

    String op = instructions.get(instructions.size() - 1).toString();
    instructions.set(instructions.size() - 1, op + " loop_end" + loopCount);

    variablesWhile.setMaxRegistry(parent.getMaxRegistry());

    if (variablesWhile.getReturnParameter() != null) {
      if (variablesWhile.getReturnParameter().getValue().getRegistry() == null)
        variablesWhile.getReturnParameter().getValue()
            .setRegistry(parent.getReturnParameter().getValue().getRegistry());
    }

    instructions = this.jjtGetChild(1).getJVMCode(variablesWhile, instructions);

    parent.setMaxRegistry(variablesWhile.getMaxRegistry());

    instructions.add("goto loop" + loopCount);

    instructions.add("loop_end" + loopCount + ":");

    return instructions;

  }

}
/*
 * JavaCC - OriginalChecksum=6da5aeac38e50f236962e83070b4bc22 (do not edit this
 * line)
 */
