import java.util.Stack;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.AbstractMap.SimpleEntry;

/* Generated By:JJTree: Do not edit this line. ASTIf.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTIf extends SimpleNode {
  public ASTIf(int id) {
    super(id);
  }

  public ASTIf(Parser p, int id) {
    super(p, id);
  }

  @Override
  public SimpleEntry<Boolean,Boolean> createAndCheckSymbol(SymbolTable parent) throws ParseException {
    boolean allCorrect = true;
    Boolean isElse = false;    
    Stack<SymbolTable> symbolStack = new Stack<>();
    SymbolTable toPass = null;
    //if create table
    try {
      toPass = parent.clone();
      symbolStack.push(toPass);
    }catch(CloneNotSupportedException e) {
      e.getMessage();
    }

    for (int i = 0; i < this.jjtGetNumChildren(); i++){
      if(this.jjtGetChild(i) instanceof ASTElse) {
        try {
          toPass = parent.clone();
          symbolStack.push(toPass);
          isElse = true;
        }catch(CloneNotSupportedException e) {
          e.getMessage();
        }
      }
      if(this.jjtGetChild(i).createAndCheckSymbol(toPass).getKey() == false){
        allCorrect = false;
      }
      if(isElse){
        mergeSymbolTables(symbolStack, parent);
        isElse = false;
      }
    }
    return new SimpleEntry<>(allCorrect,null);
  }


  public void mergeSymbolTables(Stack<SymbolTable> symbols,SymbolTable parent){
    
    
    FunctionTable elseTable = (FunctionTable) symbols.pop();
    FunctionTable ifTable = (FunctionTable) symbols.pop();
  
    LinkedHashMap<String, Symbol> ifVariables = ifTable.getVariables();
    Symbol elseVariable;
    for(Map.Entry<String, Symbol> entry : ifVariables.entrySet()){
      if((elseVariable = elseTable.lookupVariable(entry.getKey())) != null){
        if(elseVariable.equals(entry.getValue())) {
          parent.pushVariable(entry.getKey(),entry.getValue());
        }
      }
    }
    SimpleEntry<String,Symbol> finalReturn = elseTable.getReturnParameter();
    if(ifTable.getReturnParameter() != null && finalReturn != null) {
      if(finalReturn.getValue().equals(ifTable.getReturnParameter().getValue())) {
        parent.setReturnParameter(finalReturn);
      }
    }
    
  }


}
/* JavaCC - OriginalChecksum=4f68923b47f767356ea2837b579bfe29 (do not edit this line) */
