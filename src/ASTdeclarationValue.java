import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.AbstractMap.SimpleEntry;

/* Generated By:JJTree: Do not edit this line. ASTdeclarationValue.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTDeclarationValue extends SimpleNode {

  public String signal = null;
  public Integer value = null;
  
  public ASTDeclarationValue(int id) {
    super(id);
  }

  public ASTDeclarationValue(Parser p, int id) {
    super(p, id);
  }

  public String getValueSigned() {
    if (signal != null && value != null)
      return "" + this.signal + this.value;
    else if (value != null && signal == null)
      return "" + this.value;
    else
      return "";
  }

  //DeclarationValue(+/- value)
  @Override
  public String toString(String prefix){

    if(signal != null && value != null)
      return prefix + " " + toString()+ " ( "+ this.signal + this.value + " )";
    else if(value != null && signal==null)
      return prefix + " " + toString() + " ( " + this.value + " )";
    else 
      return prefix + " " + toString();
  }

  @Override
  public SimpleEntry<Boolean,Boolean> createAndCheckSymbol(SymbolTable parent) throws ParseException {
     
    ASTElement element = (ASTElement) this.parent.jjtGetChild(0);;
    String declarationVariableName = element.name;
    Boolean elementIsArray = element.isArray;

    Symbol declaration = parent.lookupVariable(declarationVariableName);

    //VERIFICATION: to check if a[] =1;
     if (declaration == null) {
      
        if (elementIsArray) {
            elementIsArray = false;
        }
        //if variable is not defined push it
        parent.pushVariable(declarationVariableName, elementIsArray, true);
     
    } else {
      
        //VERIFICATION: new element is a declaration value but already exists an uninitialized array with the same name (a[]; a=3;)
        if (declaration.isArray() && !declaration.isInitialized()) {
          throw new ParseException(this, "Declaration Array " + declarationVariableName + " has not size specified");
        }

        if(elementIsArray == declaration.isArray()) {
          declaration.setInitialized(true);
        }

        //VERIFICATION: check if new variable is not array while there's another variable already defined as int
        if(elementIsArray != declaration.isArray() && declaration.isArray() == false) {
          throw new ParseException(this, "Declaration Variable "+declarationVariableName+ " already exists as a diferent type");
        }
    }
    return new SimpleEntry<>(true,false);

  }

  public ArrayList<LinkedHashMap<String, ArrayList>> getJVMCode(GlobalTable parent,
      ArrayList<LinkedHashMap<String, ArrayList>> insts) {
    ASTElement element = (ASTElement) this.parent.jjtGetChild(0);
    String elemName = element.name;
    ArrayList<LinkedHashMap<String, ArrayList>> instructions = insts;

    Boolean setDec = false;
    if (instructions.get(1).get(elemName) == null)
      setDec = true;
    Symbol symbol = parent.getFromAll(elemName);
    String dec = ".field static " + elemName;

    String value = getValueSigned();

    if (symbol.isArray()) {

      // String arr_size = statics_array_sizes.get(element.name);
      // if (arr_size != null) {
      // if (value != null) {
      // ArrayList staList = statics.get(element.name);
      // staList.addAll(initializeArray(dec_locals_counter, arr_size, value,
      // module_name, element.name));
      // dec_stack_counter = setStackCounter(dec_stack_counter, 3);

      // dec_locals_counter += 2;

      // statics.put(element.name, staList);

      // }
      // dec += " [I ";
      // } else {
      // dec += " I ";

      // if (value != "") {
      // dec += "= " + value;
      // }

      // }
    } else {
      dec += " I ";
      if (value != "") {
        dec += "= " + value;
      }
    }

    if (setDec) {
      instructions.get(0).get("declarations").add(dec);
    }

    return instructions;

  }

  // public String getArraySize(LinkedHashMap<String, String> statics_array_sizes,
  // String sizeVar) {
  // String new_size_var = statics_array_sizes.get(sizeVar);
  // String ret = "";
  // try {
  // ret = Integer.parseInt(new_size_var) + "";
  // } catch (Exception e) {
  // if (new_size_var.indexOf(".size") == -1) {
  // ret = new_size_var;
  // } else {
  // ret = getArraySize(statics_array_sizes, new_size_var);
  // }
  // }

  // return ret;
  // }

}
/* JavaCC - OriginalChecksum=f6252d80a18ca6058cc57a45c8f379c8 (do not edit this line) */
