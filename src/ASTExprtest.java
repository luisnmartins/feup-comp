import java.util.AbstractMap.SimpleEntry;


/* Generated By:JJTree: Do not edit this line. ASTExprtest.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTExprtest extends SimpleNode {

  public String operator;
  
  public ASTExprtest(int id) {
    super(id);
  }

  public ASTExprtest(Parser p, int id) {
    super(p, id);
  }

  //Exprtest(</>/>>/<<..)
  @Override
  public String toString(String prefix){
    return prefix + " " + toString()+ " ( "+ this.operator+ " )";
  }

  @Override
  public SimpleEntry<Boolean,Boolean> createAndCheckSymbol(SymbolTable parent) throws ParseException {
    
    ASTAccess leftSide = (ASTAccess) this.jjtGetChild(0);
    SimpleEntry<Boolean,Boolean> lhs = this.jjtGetChild(0).createAndCheckSymbol(parent);
    Symbol newVar = parent.getFromAll(leftSide.name);
   
    if(lhs.getKey() == false){
      return new SimpleEntry<>(false,null);
    }

    if(this.jjtGetChild(1) != null) {
      SimpleEntry<Boolean,Boolean> rhs = this.jjtGetChild(1).createAndCheckSymbol(parent);
      if(rhs.getKey() == false) {
        return new SimpleEntry<>(false, null);
      }
      else {
        if(rhs.getValue() != false){
          throw new ParseException(this, "Can only compare integers");
          
        }
        if(newVar != null) {
          
          if(!newVar.isInitialized()) {
            throw new ParseException(this, "Variable " + leftSide.name + " is not initialized!");
            
          }
          if(lhs.getValue()){
            throw new ParseException(this, "Variable " + leftSide.name + " is an array can't be compared");
          }
          
        } 
      }
    }

    return new SimpleEntry<>(true,null);
  }

}
/* JavaCC - OriginalChecksum=583babd77beef46dab385c625b5ec4a0 (do not edit this line) */
