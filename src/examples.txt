gen_code1:

The while cycle in the line 4 which corresponds to the code existent in the .j file between lines 10 and 39.
Notice the fact that it is according to the most efficient template, meaning it is optimized (using -o option). As refered in the
optimizations section you may also notice the existence of an if statement with the reverse condition which destination in case of being true is the end of loop (loop_end0)

In the cases where in an assign the left variable also appears on the right side, and the operation is either sum ou subtraction (and the variable is function local),
the iinc instruction is used.


gen_code2:

In the line 16 it is possible to notice the existence of the instruction iconst_m1, optimized for instructions where one of the elements is a constant equal to -1.

In the lines 19 to 21, 23 to 24, you may observe that there is a case of constant propagation followed by constant folding, meaning that the variables t and a are replaced
and then the operations are made with only one istore instruction for the final value.

In the lines 34 and 35 only constant propagation is used as the variable c may have its value altered previously meaning it isn't possible to propagate its value.

Note also the lines 29 and 30 that beacuse they are in a cycle while no optimizations are made, neither constant propagation nor constant folding, 
as these may be changed in the loop iterations.